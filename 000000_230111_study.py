## UNIT12 딕셔너리 사용하기 ##

########################################################################
# 시퀀스 자료형은 자료를 그냥 단순하게 일렬로 늘어 놓는 형태
# 딕셔너리는 각 자료에 이름을 붙여 넣는방식
# lux = {'a':500,...}이런식
# 해시라고도 부를 수 있다
########################################################################

# 1. 딕셔너리 = {키1:값1, 키2:값2...}

dic1 = {"Alpha":10,"Beta":20,"Gamma":30}
print("dic1 = ",dic1)

# 2. 키값이 중복이 되면 뒤에 있는 키값만 적용이 된다.

dic2 = {'a':110,'a':560}
print(dic2['a'])    #=> index하는 문자열을 지정한다.

# 3. 값으로 모든 자료형을 사용할 수 있다

dic3 = {"int":10,"foat":11.5,"bool":False,"LIST":[44,55],"TUPLE":(66,77),int : 44,bool:True}
print(dic3)

# 4. 빈 디셔너리 만들기

dic4 = {}   #일반적인 시퀀스 자료형과 선언이 같다. dic5 = dict()형태로도 가능하다.

# 5. dict()로 디셔너리 만들기

dic5 = dict(int_val=100,float_val=99.99,string_val="Hello",tuple_val=(4,5,6))   #dict()로 딕셔러니를 선언할 때에는 ""나 ''를 사용하지 않고 : 대신 =를 쓴다.
print(dic5)

dic6 = dict(zip(['a','b'],[1,2]))   #이런형태도
dic7 = dict([('c',7),('d',8)])      #이렇게도
dic8 = dict({'e':10,'f':11})        #이런것도된다

print(dic6,dic7,dic8)

# 6. 키에 접근

print(dic3["bool"])     #키 문자를 입력한다.
dic3["int"] = 999       #10 -> 999로 변경
dic3["NEW KEY"] = "NEW dic3 value"  #새로운 키가 추가된다.
print(dic3)
#>> 단 없는 키는 error를 띄운다.

# 7. 키 값 확인 : in 연산자를 사용하여 키가 있는지 확인 할 수 있다.

print("LONG" in dic3)
print("LONG" not in dic3)

# 8. 딕셔너리 길이 구하기

print(len(dic3))
